"""
	Import SAF-T file and extract accounts as flat table to CSV file.
"""
# Import dependencies
import bs4                    as bs
import pandas                 as pd

from datetime import datetime as dt

# Set console parameters for development
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

# Set Import Path
file_path_import = r' File Path .txt'

# Set Export Path
file_path_export = r' Folder Path \{0} - Extract {1}.csv'

# Set Multiplier
multiplier = dict({ 'Debit' : -1,
                    'Credit':  1
                  })

file_txt = open(file_path,'r')
file_xml = bs.BeautifulSoup(file_txt, 'lxml')

dataset_accounts = pd.DataFrame()

# Set variables 
temp_list = list()
temp_dict = dict()

for account in file_xml.find('n1:generalledgeraccounts').find_all('n1:account'):
    temp_dict = dict({'Account ID'           : account.find('n1:accountid').get_text(strip=True),
                      'Description'          : account.find('n1:accountdescription').get_text(strip=True),
                      'Standard ID'          : account.find('n1:standardaccountid').get_text(strip=True),
                      'Account Type'         : account.find('n1:accounttype').get_text(strip=True),
                      'Account Creation Date': account.find('n1:accountcreationdate').get_text(strip=True)
                     })
    
    if account.find('n1:openingdebitbalance') is None:
       temp_dict['Opening Balance Amount'] = account.find('n1:openingcreditbalance').get_text(strip=True)
       temp_dict['Opening Balance Flag'] = 'Credit'
    else: 
       temp_dict['Opening Balance Amount'] = account.find('n1:openingdebitbalance').get_text(strip=True)
       temp_dict['Opening Balance Flag'] = 'Debit'
       
    if account.find('n1:closingdebitbalance') is None:
       temp_dict['Closing Balance Amount'] = account.find('n1:closingcreditbalance').get_text(strip=True)
       temp_dict['Closing Balance Flag'] = 'Credit'
    else: 
       temp_dict['Closing Balance Amount'] = account.find('n1:closingdebitbalance').get_text(strip=True)
       temp_dict['Closing Balance Flag'] = 'Debit'
    
    temp_list.append(temp_dict)
    
dataset_accounts = pd.DataFrame(temp_list)

# Clear variables explicitly
temp_list = list()
temp_dict = dict()

# For Each Transaction:
#   For Each Line in Transaction:
#     1. Get Account ID
#     2. Determine if Credit or Debit
#     update temporary dictionary
#   update temporary list

for transaction in file_xml.find('n1:generalledgerentries').find('n1:journal').find_all('n1:transaction'):
    for general_ledger_line_entry in transaction.find_all('n1:line'):
        temp_dict = dict({'Account ID' : general_ledger_line_entry.find('n1:accountid').get_text(strip=True)})
        if general_ledger_line_entry.find('n1:debitamount') is None:
            temp_dict['Transaction Amount'] = general_ledger_line_entry.find('n1:creditamount').find('n1:amount').get_text(strip=True)
            temp_dict['Transaction Flag'] = 'Credit'
            
        else:
            temp_dict['Transaction Amount'] = general_ledger_line_entry.find('n1:debitamount').find('n1:amount').get_text(strip=True)
            temp_dict['Transaction Flag'] = 'Debit'
        
        temp_list.append(temp_dict)

dataset_transactions = pd.DataFrame(temp_list)
dataset_transactions['Transaction Amount'] = dataset_transactions['Transaction Amount'].astype('float')
dataset_transactions['Transaction Amount, +/-'] = dataset_transactions[['Transaction Amount','Transaction Flag']].apply(lambda x: x['Transaction Amount'] * multiplier[x['Transaction Flag']], axis = 1)

dataset_transactions.sort_values(by=['Account ID', 'Transaction Flag'])
net_transactions = dataset_transactions[['Account ID','Transaction Amount, +/-']].groupby(by=['Account ID']).sum()

# Reconciliation
dataset_accounts['Opening Balance Amount']      = dataset_accounts['Opening Balance Amount'].astype('float')
dataset_accounts['Opening Balance Amount, +/-'] = dataset_accounts[['Opening Balance Amount','Opening Balance Flag']].apply(lambda x: x['Opening Balance Amount'] * multiplier[x['Opening Balance Flag']], axis = 1)

dataset_accounts['Closing Balance Amount']      = dataset_accounts['Closing Balance Amount'].astype('float')
dataset_accounts['Closing Balance Amount, +/-'] = dataset_accounts[['Closing Balance Amount','Closing Balance Flag']].apply(lambda x: x['Closing Balance Amount'] * multiplier[x['Closing Balance Flag']], axis = 1)

dataset_accounts['Net Movement, Balance'] = dataset_accounts['Closing Balance Amount, +/-'] - dataset_accounts['Opening Balance Amount, +/-']

account_movement = dataset_accounts.join(net_transactions, how='outer', on= 'Account ID')
account_movement['Difference'] = account_movement['Net Movement, Balance'].fillna(value=0) - account_movement['Transaction Amount, +/-'].fillna(value=0)


# Print Control Checks to Console
# Transaction Count
transactions_count_flag = int(file_xml.find('n1:generalledgerentries').find('n1:numberofentries').get_text(strip=True))
transactions_count_calc = len(file_xml.find('n1:generalledgerentries').find('n1:journal').find_all('n1:transaction'))
print('----------------------------------')
print('Transaction Count\nControl:    {0:4}\nCalculated: {1:4}\nDifference: {2:4}'.format(transactions_count_flag, 
                                                                                        transactions_count_calc, 
                                                                                        transactions_count_flag-transactions_count_calc))


total_debit_flag  = float(file_xml.find('n1:generalledgerentries').find('n1:totaldebit').get_text(strip=True))
total_credit_flag = float(file_xml.find('n1:generalledgerentries').find('n1:totalcredit').get_text(strip=True))

total_debit_calc  = dataset_transactions[dataset_transactions['Transaction Flag']=='Debit' ]['Transaction Amount'].sum()
total_credit_calc = dataset_transactions[dataset_transactions['Transaction Flag']=='Credit']['Transaction Amount'].sum()

total_debit_diff  = total_debit_flag  - total_debit_calc
total_credit_diff = total_credit_flag - total_credit_calc

print('----------------------------------')
print('Transaction Amount\n             Debit        Credit \nControl:    {0:12.2f} {1:12.2f} \nCalculated: {2:12.2f} {3:12.2f}\nDifference: {4:12.2f} {5:12.2f}'.format(
                                    total_debit_flag, total_credit_flag,
                                    total_debit_calc, total_credit_calc,
                                    total_debit_diff, total_credit_diff))


# Print Reconciliation to Console
print('----------------------------------')
print('Accounts with non-Zero Difference: \nCount: {0:3}'.format(account_movement[account_movement['Difference'] != 0]['Difference'].count()))
print('----------------------------------')

for account in account_movement[account_movement['Difference'] != 0]['Account ID']:
    print('Account ID: {0}'.format(account))
    print('Absolute Difference: {0:10.2f}'.format(account_movement[account_movement['Account ID'] == account]['Difference'].abs().sum()))
    print('Net Difference:      {0:10.2f}'.format(account_movement[account_movement['Account ID'] == account]['Difference'].sum()))
    print('----------------------------------')

print('Total:')
print('Absolute Difference: {0:10.2f}'.format(account_movement['Difference'].abs().sum()))
print('Net Difference:      {0:10.2f}'.format(account_movement['Difference'].sum()))
print('----------------------------------')


# account_movement.to_csv(file_path_export.format( 'Consolidated Table' ,  dt.now().strftime("%Y-%m-%d %H%M%S")))
# dataset_accounts.to_csv(file_path_export.format( 'Account Table' , dt.now().strftime("%Y-%m-%d %H%M%S")))
